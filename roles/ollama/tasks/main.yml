---

- name: Ensure tesseract user exists.
  register: tesseract_user_details
  ansible.builtin.user:
    name: "{{ tesseract_username }}"

- name: Ensure curl and cron are installed.
  ansible.builtin.package:
    name:
      - curl
      - cron
    update_cache: true

- name: Set architecture variable.
  ansible.builtin.set_fact:
    arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

- name: Install AMD ROCm.
  when: ollama_install_rocm is true
  block:

    - name: Assert that all required inputs have been provided.
      ansible.builtin.assert:
        that:
          - ollama_rocm_version_short is not none
          - ollama_rocm_version_long is not none

    - name: Check if the distribution is Ubuntu.
      ansible.builtin.assert:
        that:
          - ansible_distribution == 'Ubuntu'

    - name: Install necessary Linux headers and modules.
      ansible.builtin.apt:
        name:
          - "linux-headers-{{ ansible_kernel }}"
          - "linux-modules-extra-{{ ansible_kernel }}"
        state: present
        update_cache: true

    - name: Add the tesseract user to the render and video groups.
      ansible.builtin.user:
        name: "{{ tesseract_username }}"
        groups:
          - render
          - video
        append: true

    - name: Download the AMDGPU driver package.
      ansible.builtin.get_url:
        url: "https://repo.radeon.com/amdgpu-install/\
          {{ ollama_rocm_version_short }}/ubuntu/\
          {{ ansible_distribution_release }}/amdgpu-install_\
          {{ ollama_rocm_version_long }}_all.deb"
        dest: /tmp/amdgpu-install.deb
        owner: root
        group: root
        mode: '0644'
      register: download_driver
      retries: 5
      delay: 10
      until: download_driver is succeeded

    - name: Install the AMDGPU driver package.
      ansible.builtin.apt:
        deb: /tmp/amdgpu-install.deb

    - name: Install AMDGPU DKMS and ROCm.
      ansible.builtin.apt:
        name:
          - amdgpu-dkms
          - rocm
        state: present
        update_cache: true

    - name: Check if ROCm package is already installed.
      ansible.builtin.stat:
        path: /usr/lib/ollama
      register: rocm_package_installed

    - name: Download the ROCm package to /tmp.
      ansible.builtin.get_url:
        url: "https://ollama.com/download/ollama-linux-{{ arch }}-rocm.tgz"
        dest: "/tmp/ollama-linux-{{ arch }}-rocm.tgz"
        owner: root
        group: root
        mode: '0644'
      register: download_rocm
      retries: 5
      delay: 10
      until: download_rocm is succeeded
      when: not rocm_package_installed.stat.exists

    - name: Extract ROCm package to /usr.
      ansible.builtin.unarchive:
        src: "/tmp/ollama-linux-{{ arch }}-rocm.tgz"
        dest: /usr
        remote_src: true
        owner: root
        group: root
        mode: '0755'
      when: not rocm_package_installed.stat.exists

- name: Download the Ollama package to /tmp.
  ansible.builtin.get_url:
    url: "https://ollama.com/download/ollama-linux-{{ arch }}.tgz"
    dest: "/tmp/ollama-linux-{{ arch }}.tgz"
    owner: root
    group: root
    mode: '0644'
  register: download_ollama
  retries: 5
  delay: 10
  until: download_ollama is succeeded

- name: Extract the Ollama package to /usr.
  ansible.builtin.unarchive:
    src: "/tmp/ollama-linux-{{ arch }}.tgz"
    dest: /usr
    remote_src: true
    owner: root
    group: root
    mode: '0755'
  notify: restart ollama

- name: Copy ollama.service template to /etc/systemd/system.
  ansible.builtin.template:
    src: templates/ollama.service.j2
    dest: /etc/systemd/system/ollama.service
    owner: root
    group: root
    mode: '0644'
  notify: restart ollama

- name: Start and enable ollama service.
  ansible.builtin.service:
    name: ollama
    state: started
    enabled: true

- name: Ensure /opt/ollama/bin directory exists.
  ansible.builtin.file:
    path: /opt/ollama/bin
    state: directory
    mode: '0755'

- name: Template the unload_models.sh script.
  ansible.builtin.template:
    src: templates/unload_models.sh.j2
    dest: /opt/ollama/bin/unload_models.sh
    owner: root
    group: root
    mode: '0755'

- name: Create cron job to periodically unload models.
  ansible.builtin.cron:
    name: "Unload Ollama models"
    job: /bin/bash /opt/ollama/bin/unload_models.sh
    minute: "0"
    hour: "{{ ollama_unload_models_cron }}"

- name: Create cron job to restart ollama service.
  ansible.builtin.cron:
    name: "Restart Ollama service"
    job: /bin/systemctl restart ollama.service
    minute: "30"
    hour: "{{ ollama_restart_hour_cron }}"

- name: Ensure the Ollama models are downloaded.
  ansible.builtin.include_tasks:
    file: build_model.yml
  loop: "{{ ollama_models }}"
  when: ollama_models | length > 0
