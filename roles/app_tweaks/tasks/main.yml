---

- name: Assert that all required inputs have been provided.
  ansible.builtin.assert:
    that:
      - tesseract_username is not none
      - tesseract_domain is not none

- name: Ensure tesseract user exists.
  register: tesseract_user_details
  ansible.builtin.user:
    name: "{{ tesseract_username }}"

# Booksonic

- name: Check if Booksonic config path exists.
  ansible.builtin.stat:
    path: "{{ app_tweaks_booksonic_path }}"
  register: booksonic_exists

- name: When Booksonic config path exists.
  when: booksonic_exists.stat.exists or app_tweaks_enable_booksonic is true
  block:

    - name: Install music-tag using pip.
      ansible.builtin.pip:
        name:
          - music-tag

    - name: Create scripts directory if it does not exist.
      ansible.builtin.file:
        path: "{{ tesseract_files_path }}/scripts"
        state: directory
        owner: root
        group: root
        mode: '0775'

    - name: Copy podcast_tagger script to scripts directory.
      ansible.builtin.template:
        src: templates/podcast_tagger.py.j2
        dest: "{{ tesseract_files_path }}/scripts/podcast_tagger.py"
        owner: root
        group: root
        mode: '0755'

    - name: Add cron job for podcast_tagger script.
      ansible.builtin.cron:
        name: "Podcast tagger."
        minute: "0"
        hour: "0"
        weekday: "*"
        job: "python3 {{ tesseract_files_path }}/scripts/podcast_tagger.py"

# Nextcloud

- name: Check if Nextcloud config path exists.
  ansible.builtin.stat:
    path: "{{ app_tweaks_nextcloud_path }}"
  register: nextcloud_exists

- name: Add cron job to run Nextcloud system cron.php once every 10 minutes.
  ansible.builtin.cron:
    name: "Update Nextcloud system cron.php once every 10 minutes."
    minute: "*/30"
    job: "docker exec -u {{ tesseract_user_details.uid }} nextcloud php cron.php"
  when: nextcloud_exists.stat.exists or app_tweaks_enable_nextcloud is true

# Transmission

- name: Check if Transmission config path exists.
  ansible.builtin.stat:
    path: "{{ app_tweaks_transmission_config_path }}"
  register: transmission_exists

- name: When Transmission config path exists.
  when: transmission_exists.stat.exists or app_tweaks_enable_transmission is true
  block:

    - name: Assert that all required inputs have been provided.
      ansible.builtin.assert:
        that:
          - app_tweaks_openvpn_download_url is not none
          - app_tweaks_transmission_username is not none
          - app_tweaks_transmission_password is not none

    - name: Install unzip.
      ansible.builtin.package:
        name:
          - unzip
        update_cache: true

    - name: Create transmission_openvpn directory if it does not exist.
      ansible.builtin.file:
        path: /tmp/transmission_openvpn
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Download and extract OpenVPN configuration.
      ansible.builtin.unarchive:
        src: "{{ app_tweaks_openvpn_download_url }}"
        dest: /tmp/transmission_openvpn
        remote_src: true

    - name: Create openvpn directory if it does not exist.
      ansible.builtin.file:
        path: "{{ app_tweaks_openvpn_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy OpenVPN configuration to correct location.
      ansible.builtin.copy:
        src: "/tmp/transmission_openvpn/{{ item.src }}"
        dest: "{{ app_tweaks_openvpn_path }}/{{ item.dest }}"
        remote_src: true
        owner: root
        group: root
        mode: '0644'
        force: false
      with_items:
        - { src: ca.crt, dest: ca.crt }
        - { src: client.crt, dest: client.crt }
        - { src: client.key, dest: client.key }
        - { src: openvpn.ovpn, dest: default.ovpn }

    # Templates would be better but directrly extracting from cyberghost zip into files directory would no longer be supported.
    - name: Edit openvpn config.
      ansible.builtin.lineinfile:
        path: "{{ app_tweaks_openvpn_path }}/default.ovpn"
        search_string: "{{ item.search }}"
        line: "{{ item.line }}"
        owner: root
        group: root
        mode: '0644'
      with_items:
        - { search: auth-user-pass, line: auth-user-pass /etc/openvpn/custom/openvpn-credentials.txt }
        - { search: ca, line: ca /etc/openvpn/custom/ca.crt }
        - { search: cert, line: cert /etc/openvpn/custom/client.crt }
        - { search: key, line: key /etc/openvpn/custom/client.key }

    - name: Create Transmission config directory if it does not exist.
      ansible.builtin.file:
        path: "{{ app_tweaks_transmission_config_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create openvpn-credentials.txt file.
      ansible.builtin.copy:
        dest: "{{ app_tweaks_transmission_config_path }}/openvpn-credentials.txt"
        content: |
          {{ app_tweaks_transmission_username }}
          {{ app_tweaks_transmission_password }}
        owner: root
        group: root
        mode: '0644'

    # Change openvpn file permission so other users can't see it

# Jenkins

- name: Check if Jenkins config path exists.
  ansible.builtin.stat:
    path: "{{ app_tweaks_jenkins_config_path }}"
  register: jenkins_exists

- name: When Jenkins config path exists.
  when: jenkins_exists.stat.exists or app_tweaks_enable_jenkins is true
  block:

    - name: Install Java.
      ansible.builtin.package:
        pkg:
          - default-jre
          - sshpass
        update_cache: true

    - name: Ensure docker group exists.
      ansible.builtin.group:
        name: docker
        state: present

    - name: Create a build user.
      ansible.builtin.user:
        name: "{{ app_tweaks_build_username }}"
        generate_ssh_key: true
        state: present
        shell: /bin/bash
        create_home: true
        home: "/home/{{ app_tweaks_build_username }}"
        groups: docker

# Drone CI

- name: Check if Drone CI config path exists.
  ansible.builtin.stat:
    path: "{{ app_tweaks_drone_config_path }}"
  register: drone_exists

- name: When Drone CI config path exists.
  when: drone_exists.stat.exists or app_tweaks_enable_drone is true
  block:

    - name: Assert that all required inputs have been provided.
      ansible.builtin.assert:
        that:
          - app_tweaks_drone_rpc_secret is not none

    - name: Install Python.
      ansible.builtin.package:
        name:
          - python3
          - python3-pip
          - openssh-client
          - acl
        update_cache: true

    - name: Ensure docker group exists.
      ansible.builtin.group:
        name: docker
        state: present

    - name: Create a build user.
      ansible.builtin.user:
        name: "{{ app_tweaks_build_username }}"
        generate_ssh_key: true
        state: present
        shell: /bin/bash
        create_home: true
        home: "/home/{{ app_tweaks_build_username }}"
        groups: docker

    - name: Install Ansible and Molecule.
      become: true
      become_user: "{{ app_tweaks_build_username }}"
      ansible.builtin.pip:
        name:
          - ansible
          - ansible-lint
          - yamllint
          - molecule
          - molecule-docker
          - molecule-vagrant

    - name: Add .local/bin to build user path.
      ansible.builtin.lineinfile:
        path: "/home/{{ app_tweaks_build_username }}/.bashrc"
        line: 'export PATH="$HOME/.local/bin:$PATH"'
        owner: "{{ app_tweaks_build_username }}"
        group: "{{ app_tweaks_build_username }}"
        mode: '0644'
        create: true

    - name: Download and extract Done Exec Runner.
      ansible.builtin.unarchive:
        src: "{{ app_tweaks_drone_exec_download_url }}"
        dest: /tmp
        remote_src: true

    - name: Copy Drone Exec Runner to correct location.
      ansible.builtin.copy:
        src: /tmp/drone-runner-exec
        dest: /usr/local/bin/drone-runner-exec
        owner: root
        group: root
        mode: '0755'
        remote_src: true

    - name: Create config directory.
      ansible.builtin.file:
        path: "/home/{{ app_tweaks_build_username }}/.drone-runner-exec"
        state: directory
        owner: "{{ app_tweaks_build_username }}"
        group: "{{ app_tweaks_build_username }}"
        mode: '0755'

    - name: Create config file.
      no_log: true
      ansible.builtin.blockinfile:
        path: "/home/{{ app_tweaks_build_username }}/.drone-runner-exec/config"
        create: true
        owner: "{{ app_tweaks_build_username }}"
        group: "{{ app_tweaks_build_username }}"
        mode: '0600'
        block: |
          DRONE_RPC_PROTO=http
          DRONE_RPC_HOST=drone.{{ tesseract_domain }}
          DRONE_RPC_SECRET={{ app_tweaks_drone_rpc_secret }}
          DRONE_LOG_FILE="/home/{{ app_tweaks_build_username }}/.drone-runner-exec/log.txt"
          DRONE_RUNNER_CAPACITY={{ app_tweaks_drone_runner_capacity }}
          DRONE_RUNNER_ENVFILE="/home/build/.drone-runner-exec/drone.conf"

    - name: Template drone.conf file.
      ansible.builtin.template:
        src: templates/drone.conf.j2
        dest: "/home/{{ app_tweaks_build_username }}/.drone-runner-exec/drone.conf"
        owner: "{{ app_tweaks_build_username }}"
        group: "{{ app_tweaks_build_username }}"
        mode: '0600'

    - name: Create systemd service file.
      ansible.builtin.template:
        src: templates/drone-runner-exec.service.j2
        dest: /etc/systemd/system/drone-runner-exec.service
        owner: root
        group: root
        mode: '0644'

    - name: Ensure drone-runner-exec service is enabled and running.
      ansible.builtin.service:
        name: drone-runner-exec
        enabled: true
        state: started
