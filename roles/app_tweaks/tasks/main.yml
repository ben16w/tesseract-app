---

- name: Assert that all required inputs have been provided.
  ansible.builtin.assert:
    that:
      - tesseract_username is not none
      - transmission_openvpn_download_url is not none

- name: Ensure tesseract user exists.
  register: tesseract_user_details
  ansible.builtin.user:
    name: "{{ tesseract_username }}"

# Booksonic

- name: Check if Booksonic config path exists.
  ansible.builtin.stat:
    path: "{{ booksonic_path }}"
  register: booksonic_exists

- name: When Booksonic config path exists.
  when: booksonic_exists.stat.exists
  block:

    - name: Install music-tag using pip.
      ansible.builtin.pip:
        name:
          - music-tag

    - name: Create scripts directory if it does not exist.
      ansible.builtin.file:
        path: "{{ tesseract_files_path }}/scripts"
        state: directory
        owner: root
        group: root
        mode: 0775

    - name: Copy podcast_tagger.py.
      ansible.builtin.template:
        src: templates/podcast_tagger.py.j2
        dest: "{{ tesseract_files_path }}/scripts/podcast_tagger.py"
        owner: root
        group: root
        mode: 0755

    - name: Add cron job for podcast_tagger script.
      ansible.builtin.cron:
        name: "Podcast tagger."
        minute: "0"
        hour: "0"
        weekday: "*"
        job: "python3 {{ tesseract_files_path }}/scripts/podcast_tagger.py"

# Nextcloud

- name: Check if Nextcloud config path exists.
  ansible.builtin.stat:
    path: "{{ nextcloud_path }}"
  register: nextcloud_exists

- name: Add cron job to run Nextcloud system cron.php once every 10 minutes.
  ansible.builtin.cron:
    name: "Update Nextcloud system cron.php once every 10 minutes."
    minute: "*/30"
    job: "docker exec -u {{ tesseract_user_details.uid }} nextcloud php cron.php"
  when: nextcloud_exists.stat.exists

# Transmission

- name: Check if Transmission config path exists.
  ansible.builtin.stat:
    path: "{{ transmission_openvpn_path }}"
  register: transmission_exists

- name: When Transmission config path exists.
  when: transmission_exists.stat.exists is true
  block:

    - name: Assert that all required inputs have been provided.
      ansible.builtin.assert:
        that:
          - transmission_openvpn_download_url is not none

    - name: Create scripts directory if it does not exist.
      ansible.builtin.file:
        path: /tmp/transmission_openvpn
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Unarchive a file that needs to be downloaded (added in 2.0)
      ansible.builtin.unarchive:
        src: "{{ transmission_openvpn_download_url }}"
        dest: /tmp/transmission_openvpn
        remote_src: true

    - name: Put all OpenVPN configuration into place.
      ansible.builtin.copy:
        src: "/tmp/transmission_openvpn/{{ item.src }}"
        dest: "{{ transmission_openvpn_path }}/{{ item.dest }}"
        remote_src: true
        owner: root
        group: root
        mode: 0644
        force: true
      with_items:
        - { src: ca.crt, dest: ca.crt }
        - { src: client.crt, dest: client.crt }
        - { src: client.key, dest: client.key }
        - { src: openvpn.ovpn, dest: default.ovpn }

    # Templates would be better but directrly extracting from cyberghost zip into files directory would no longer be supported.
    - name: Edit openvpn config.
      ansible.builtin.lineinfile:
        path: "{{ transmission_openvpn_path }}/default.ovpn"
        search_string: "{{ item.search }}"
        line: "{{ item.line }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - { search: auth-user-pass, line: auth-user-pass /etc/openvpn/custom/openvpn-credentials.txt }
        - { search: ca, line: ca /etc/openvpn/custom/ca.crt }
        - { search: cert, line: cert /etc/openvpn/custom/client.crt }
        - { search: key, line: key /etc/openvpn/custom/client.key }

    - name: Creating credentials file.
      ansible.builtin.copy:
        dest: "{{ transmission_config_path }}/openvpn-credentials.txt"
        content: |
          {{ transmission_username }}
          {{ transmission_password }}
        owner: root
        group: root
        mode: 0644

    # Change openvpn file permission so other users can't see it

# Jenkins

- name: Check if Transmission config path exists.
  ansible.builtin.stat:
    path: "{{ jenkins_config_path }}"
  register: jenkins_exists

- name: When Transmission config path exists.
  when: jenkins_exists.stat.exists is true
  block:

    - name: Install common software.
      ansible.builtin.apt:
        pkg:
          - default-jre
          - sshpass

    - name: Create a login user
      ansible.builtin.user:
        name: jenkins
        generate_ssh_key: true
        state: present
        shell: /bin/bash
        create_home: true
        home: /home/jenkins
