---

- name: Assert that all required inputs have been provided.
  ansible.builtin.assert:
    that:
      - tesseract_username is not none
      - tesseract_domain is not none
      - docker_data_path is not none
      - docker_appdata_path is not none
      - docker_sql_password is not none
      - email_username is not none
      - email_host is not none
      - email_port is not none
      - email_password is not none

- name: Ensure tesseract user exists.
  register: tesseract_user_details
  ansible.builtin.user:
    name: "{{ tesseract_username }}"

- name: Make sure shares path exists.
  ansible.builtin.file:
    path: "{{ docker_data_path }}"
    state: directory
    mode: 0755

- name: Make sure appdata path exists.
  ansible.builtin.file:
    path: "{{ docker_appdata_path }}"
    state: directory
    mode: 0755

- name: Download docker install script.
  ansible.builtin.get_url:
    url: https://get.docker.com
    dest: /tmp/docker_install.sh
    mode: 0744

- name: Install docker. # Won't update
  ansible.builtin.command:
    cmd: bash /tmp/docker_install.sh
    creates: /usr/bin/docker

- name: Disable docker service to stop autostart.
  when: docker_autostart_disabled is not false
  ansible.builtin.service:
    name: docker.service
    enabled: false

- name: Disable docker socket to stop autostart.
  when: docker_autostart_disabled is not false
  ansible.builtin.service:
    name: docker.socket
    enabled: false

- name: Ensure docker has started.
  ansible.builtin.service:
    name: docker
    state: started

- name: Install docker-compose.
  ansible.builtin.pip:
    name:
      - docker-compose

- name: Create docker directory if it does not exist.
  ansible.builtin.file:
    path: "{{ tesseract_files_path }}/docker"
    state: directory
    owner: root
    group: root
    mode: 0755
  when: docker_apps | length > 0

- name: Git checkout docker compose files to docker directory.
  ansible.builtin.git:
    repo: "{{ docker_compose_repo }}"
    dest: "{{ tesseract_files_path }}/docker"
    version: main
    force: true

- name: Set environment variables for docker.
  no_log: true
  ansible.builtin.blockinfile:
    path: "{{ tesseract_files_path }}/docker/.env"
    create: true
    owner: root
    group: root
    mode: 0600
    block: |
      DOCKER_DATA_PATH="{{ docker_data_path }}"
      DOCKER_APPDATA_PATH="{{ docker_appdata_path }}"
      DOCKER_USERNAME="{{ tesseract_username }}"
      DOCKER_EMAIL_USERNAME="{{ email_username }}"
      DOCKER_EMAIL_HOST="{{ email_host }}"
      DOCKER_EMAIL_PORT="{{ email_port }}"
      DOCKER_EMAIL_PASSORD="{{ email_password }}"
      DOCKER_HOSTNAME="{{ inventory_hostname }}"
      DOCKER_DOMAIN="{{ tesseract_domain }}"
      DOCKER_SQL_PASSWORD="{{ docker_sql_password }}"
      DOCKER_TZ="{{ docker_tz }}"
      DOCKER_UID="{{ tesseract_user_details.uid }}"
      DOCKER_GID="{{ tesseract_user_details.group }}"
      DOCKER_DOCKER_USERNAME="{{ docker_default_username }}"
      DOCKER_DOCKER_PASSWORD="{{ docker_default_password }}"

- name: Add extra docker environment variables.
  no_log: true
  with_items: "{{ docker_extra_vars | dict2items }}"
  ansible.builtin.lineinfile:
    path: "{{ tesseract_files_path }}/docker/.env"
    search_string: DOCKER_{{ item.key | upper }}=
    create: true
    owner: root
    group: root
    mode: 0600
    line: "DOCKER_{{ item.key | upper }}=\"{{ item.value }}\""

- name: Initialize an empty list for Docker compose files.
  ansible.builtin.set_fact:
    docker_compose_list: []

- name: Generate list of Docker compose files.
  ansible.builtin.set_fact:
    docker_compose_list: "{{ docker_compose_list + ['docker-compose.' + item + '.yml'] }}"
  with_items: "{{ docker_apps }}"

- name: Create and start Docker apps.
  community.docker.docker_compose:
    project_src: "{{ tesseract_files_path }}/docker"
    files: "{{ docker_compose_list }}"
    project_name: tesseract
    remove_orphans: true
  when: docker_apps | length > 0
