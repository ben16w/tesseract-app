---

- name: Assert that all required inputs have been provided.
  ansible.builtin.assert:
    that:
      - tesseract_username is not none
      - tesseract_hostname is not none
      - tesseract_domain is not none

      - email_username is not none
      - email_host is not none
      - email_port is not none
      - email_password is not none

      - docker_compose_repo is not none

      - docker_data_paths is iterable
      - docker_data_paths | length > 0
      - docker_appdata_path is not none

- name: Ensure tesseract user exists.
  register: tesseract_user_details
  ansible.builtin.user:
    name: "{{ tesseract_username }}"

- name: Make sure data paths exist.
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0755'
  loop: "{{ docker_data_paths }}"

- name: Make sure appdata path exists.
  ansible.builtin.file:
    path: "{{ docker_appdata_path }}"
    state: directory
    mode: '0755'

- name: Download docker install script.
  ansible.builtin.get_url:
    url: https://get.docker.com
    dest: /tmp/docker_install.sh
    mode: '0744'
  register: download_docker
  retries: 5
  delay: 10
  until: download_docker is succeeded

- name: Install docker. # Won't update
  ansible.builtin.command:
    cmd: bash /tmp/docker_install.sh
    creates: /usr/bin/docker

- name: Disable docker service to stop autostart.
  when: docker_autostart_disabled is not false
  ansible.builtin.service:
    name: docker.service
    enabled: false

- name: Disable docker socket to stop autostart.
  when: docker_autostart_disabled is not false
  ansible.builtin.service:
    name: docker.socket
    enabled: false

- name: Ensure docker has started.
  ansible.builtin.service:
    name: docker
    state: started

- name: Create docker directory if it does not exist.
  ansible.builtin.file:
    path: "{{ tesseract_files_path }}/docker"
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: docker_apps | length > 0

- name: Git checkout docker compose files to docker directory.
  ansible.builtin.git:
    repo: "{{ docker_compose_repo }}"
    dest: "{{ tesseract_files_path }}/docker"
    version: "{{ docker_compose_repo_version }}"
    force: true
  register: download_docker_compose
  retries: 5
  delay: 10
  until: download_docker_compose is succeeded

- name: Set environment variables for docker.
  no_log: true
  ansible.builtin.blockinfile:
    path: "{{ tesseract_files_path }}/docker/.env"
    create: true
    owner: root
    group: root
    mode: '0600'
    block: |
      COMPOSE_PROJECT_NAME="{{ docker_project_name }}"
      TESSERACT_APPDATA_PATH="{{ docker_appdata_path }}"
      TESSERACT_USERNAME="{{ tesseract_username }}"
      TESSERACT_EMAIL_USERNAME="{{ email_username }}"
      TESSERACT_EMAIL_HOST="{{ email_host }}"
      TESSERACT_EMAIL_PORT="{{ email_port }}"
      TESSERACT_EMAIL_PASSORD="{{ email_password }}"
      TESSERACT_HOSTNAME="{{ tesseract_hostname }}"
      TESSERACT_DOMAIN="{{ tesseract_domain }}"
      TESSERACT_TZ="{{ docker_tz }}"
      TESSERACT_UID="{{ tesseract_user_details.uid }}"
      TESSERACT_GID="{{ tesseract_user_details.group }}"
      TESSERACT_DOCKER_USERNAME="{{ docker_default_username }}"
      TESSERACT_DOCKER_PASSWORD="{{ docker_default_password }}"

- name: Add data paths to docker environment variables.
  loop: "{{ docker_data_paths }}"
  ansible.builtin.lineinfile:
    path: "{{ tesseract_files_path }}/docker/.env"
    search_string: TESSERACT_{{ item.name | upper }}_PATH=
    create: true
    owner: root
    group: root
    mode: '0600'
    line: "TESSERACT_{{ item.name | upper }}_PATH=\"{{ item.path }}\""

- name: Add extra docker environment variables.
  no_log: true
  loop: "{{ docker_extra_vars | dict2items }}"
  ansible.builtin.lineinfile:
    path: "{{ tesseract_files_path }}/docker/.env"
    search_string: TESSERACT_{{ item.key | upper }}=
    create: true
    owner: root
    group: root
    mode: '0600'
    line: "TESSERACT_{{ item.key | upper }}=\"{{ item.value }}\""

- name: Initialize an empty list for Docker compose files.
  ansible.builtin.set_fact:
    docker_compose_list: []

- name: Generate list of Docker compose files.
  ansible.builtin.set_fact:
    docker_compose_list: "{{ docker_compose_list + [tesseract_files_path + '/docker/docker-compose.' + item + '.yml'] }}"
  loop: "{{ docker_apps }}"

- name: Add extra Docker compose files.
  ansible.builtin.set_fact:
    docker_compose_list: "{{ docker_compose_list + [item] }}"
  loop: "{{ docker_extra_compose_files }}"
  when: docker_extra_compose_files | length > 0

- name: Create and start Docker apps using cli.
  ansible.builtin.command:
    cmd: docker compose -f {{ docker_compose_list | join(' -f ') }} up -d --remove-orphans
    chdir: "{{ tesseract_files_path }}/docker"
  when: docker_apps | length > 0
  register: docker_compose_result
  changed_when: docker_compose_result.stdout.find('Creating') != -1
